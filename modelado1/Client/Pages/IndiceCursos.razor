@page "/cursos"

@inject IHttpService http
    <!--direccion--> <!--1-->
<!--dentro del page va todo lo que es visual-->

      <div

         <center>



                 <img src="https://www.lavoz.com.ar/resizer/4bY9ygIGrYmuDb-Ww8KjytF66ks=/1023x682/smart/cloudfront-us-east-1.images.arcpublishing.com/grupoclarin/5DRPYXKUG5FXZMRWJ3C5FWU5KM.jpg"
                      width="600" height="200" class="imagen" />

         </center>

    </div>



<center>

    <div class="alert alert-info" role="alert">
        <p><u><h4>Cursos Varios</h4></u></p>
    </div>

</center>






<!--titulo-->


<br />

<center>

    <a class="btn btn-primary" href="cursos/crear">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-emoji-smile-fill" viewBox="0 0 16 16">
            <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zM4.285 9.567a.5.5 0 0 1 .683.183A3.498 3.498 0 0 0 8 11.5a3.498 3.498 0 0 0 3.032-1.75.5.5 0 1 1 .866.5A4.498 4.498 0 0 1 8 12.5a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .183-.683zM10 8c-.552 0-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5S10.552 8 10 8z" />
        </svg>Nuevo
    </a>
</center>


<br />


<table class="table table-dark">

    
    <tr>

          <th class=" text-center text-danger"> Id</th>   
        <th class=" text-center text-danger" > Nombre Curso </th>
        <th class="text-center text-danger"> Tutor Curso</th>
        <th class=" text-center text-danger"> Resumen </th>

    </tr>
    

    @if (cursos == null)
    {
        <tr> Cargando....</tr>
    }


    else if (cursos.Count == 0)
    {
        <tr>No existen cursos</tr>

    }


    else
    {

        @foreach (var item in cursos)
        {

            <tr>



                <span class="badge bg-secondary">
                <td>@item.Id</td></span>

                <td>@item.NombreCurso</td>
                <td>@item.TutorCurso</td>
                <td>@item.Resumen</td>
                <td>
                    <a class="btn btn-outline-success"
                       href="cursos/editar/@item.Id">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                            <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
                        </svg>Editar
                    </a>

                </td>

                <td>
                    <button class="btn btn-outline-warning" @onclick="()=>Eliminar(item)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
                        </svg>


                        Eliminar
                    </button>
                </td>

            </tr>
        }

    }

</table>




<Confirmacion @ref="confirmacion"
              onConfirm="GrabarEliminar"
              onCancel="Cancelar"
              Titulo=" BORRAR"
              textCancelar="Salir"
              textOk="Aceptar">

    <div>¿Desea eliminar el curso @eliminarCurso.NombreCurso?</div>



</Confirmacion>



@* @if (nuevo)
    {

        @if (editar || eliminar)
        {
            Cancelar();
            nuevo = true;

        }
        <br />
        <h3> nuevo Curso</h3>
        <br />

        <input placeholder=" Id de curso" @bind="ID" />
        <input placeholder=" Nombre de curso" @bind="Nomcurso" />
        <input placeholder=" Tutor de curso" @bind="Tutcurso" />
        <input placeholder=" Resumen de curso" @bind="Rescurso" />

        <button class=" btn btn-success " @onclick="GrabarNuevoCurso">Grabar</button>

        <button class="btn btn-info" @onclick="Cancelar">Cancelar</button>
    }    *@

@*


    @if (editar)
    {

        <br />
        <h3> Editar Curso</h3>
        <br />

        <input placeholder=" Id de curso" @bind="ID" />
        <input placeholder=" Nombre de curso" @bind="Nomcurso" />
        <input placeholder=" Tutor de curso" @bind="Tutcurso" />
        <input placeholder=" Resumen de curso" @bind="Rescurso" />

        <button class=" btn btn-success " @onclick="GrabarEditar">Grabar</button>

        <button class="btn btn-info" @onclick="Cancelar">Cancelar</button>
    }

    @if (eliminar)
    {

        <br />
        <h3> Eliminar Curso</h3>
        <br />

        <input placeholder=" Id de curso" @bind="ID" />
        <input placeholder=" Nombre de curso" @bind="Nomcurso" />
        <input placeholder=" Tutor de curso" @bind="Tutcurso" />
        <input placeholder=" Resumen de curso" @bind="Rescurso" />

        <button class=" btn btn-success " @onclick="GrabarEliminar">Eliminar</button>

        <button class="btn btn-info" @onclick="Cancelar">Cancelar</button>
    }

*@


@code {

    // List<Curso> cursos = new List<Curso>();


    //List<Curso> cursos = new();

    List<modelado1.Comunes.datos.Entidades.Curso> cursos;

    Confirmacion confirmacion;
    // string ID = "";
    // string Nomcurso = "";
    // string Tutcurso = "";
    // string Rescurso = "";
    // bool nuevo = false;
    // bool editar = false;
    //  bool eliminar = false;
    modelado1.Comunes.datos.Entidades.Curso eliminarCurso;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        await Leer();

        //ask.Delay(10000);




    }

    private async Task Leer()
    {
        var respuestaHttp = await http.Get<List<modelado1.Comunes.datos.Entidades.Curso>>("api/Cursos");

        if (!respuestaHttp.Error)
        {

            cursos = respuestaHttp.Respuesta;

        }

    }


    private void GrabarNuevoCurso()
    {

        modelado1.Comunes.datos.Entidades.Curso curso = new();
        //<!--instanciamos un curso nuevo-->

        // curso.Id = ID;
        //<!--las propiedades-->
        // curso.NombreCurso = Nomcurso;
        // curso.TutorCurso = Tutcurso;
        // curso.Resumen = Rescurso;

        cursos.Add(curso);

        Cancelar();


    }





    //private void Editar(modelado1.Comunes.datos.Entidades.Curso cursoEditar)
    //
    /*
    if (nuevo || eliminar)
    {
        Cancelar();

        editar = true;

    }
    */
    //editar = true;
    //ID = cursoEditar.Id;
    // Nomcurso = cursoEditar.NombreCurso;
    // Tutcurso = cursoEditar.TutorCurso;
    // Rescurso = cursoEditar.Resumen;
    //editarCurso = cursoEditar;

    /*
       private void GrabarEditar()
       {

           cursos.Remove(editarCurso);
           cursos.Add(new modelado1.Comunes.datos.Entidades.Curso() { Id = ID, NombreCurso = Nomcurso, TutorCurso = Tutcurso, Resumen = Rescurso });
           Cancelar();

       } */



    private void Eliminar(modelado1.Comunes.datos.Entidades.Curso cursoEliminar)

    {  /*
      if (nuevo || editar)
       {
       Cancelar();

       eliminar = true;

        }
        */



        // eliminar = true;

        confirmacion.Mostrar();


        // ID = cursoEliminar.Id;
        // Nomcurso = cursoEliminar.NombreCurso;
        // Tutcurso = cursoEliminar.TutorCurso;
        // Rescurso = cursoEliminar.Resumen;
        eliminarCurso = cursoEliminar;

    }



    private async Task GrabarEliminar()
    {

        var respuesta = await http.Delete($"api/Cursos/{eliminarCurso.Id}");
        if (respuesta.Error)
        {

            var body = await respuesta.GetBody();

        }
        Cancelar();
        await Leer();

    }


    private void Cancelar()
    {
        confirmacion.Ocultar();


        eliminarCurso = null;


        /*
        nuevo = false;
        editar = false;
        eliminar = false;
        ID = "";
        Nomcurso = "";
        Tutcurso = "";
        Rescurso = "";
        */


    }





}




